Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/24/17 19:28:31
AddTwo.asm						     Page 1 - 1


				; Solution program.
				; Original by Alejandro Presto - Feb 2003
				; Version 2, Gerald. Cahill
				; Version 3, Kip. Irvine (2/17/2003)

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				; dl = current x
				; dh = current y

				; bl = next x
				; bh = next y

 = 00000002			ball = 2     	;a happy face (1) looks good too.
 = 00000014			drawDelay = 20 	;milliseconds between redrawing the ball

				; Define the wall
 = 00000017			wallTop = 23      	;top row number
 = 00000038			wallBottom = 56  	;bottom row number
 = 00000019			wallLeft = 25		;left column number
 = 00000046			wallRight = 70		;right column number
 = 00000028			wall_X1 = 40      	;x position (column number)
 = 00000037			wall_X2 = 55      	;x position (column number)
 = 00000022			wall_Y1 = 34      	;x position (column number)
 = 0000002D			wall_Y2 = 45      	;x position (column number)

				; Define X
 = 00000005			x1X = 5
 = 0000000B			x2X = 11
 = 00000003			y1X = 3
 = 00000009			y2X = 9
 = 0000000E			xWidth = 14

				; Define the window size
 = 00000000			xmin = 0         	;left edge
 = 0000005F			xmax = 95        	;right edge
 = 00000000			ymin = 0         	;top
 = 0000004F			ymax = 79        	;bottom

				; Define positions of top left corner of each feild
 = 00000019			x11 = 25
 = 00000017			y11 = 23
 = 00000028			x12 = 40
 = 00000017			y12 = 23
 = 00000037			x13 = 55
 = 00000017			y13 = 23

 = 00000019			x21 = 25
 = 00000022			y21 = 34
 = 00000028			x22 = 40
 = 00000022			y22 = 34
 = 00000037			x23 = 55
 = 00000022			y23 = 34

 = 00000019			x31 = 25
 = 0000002D			y31 = 45
 = 00000028			x32 = 40
 = 0000002D			y32 = 45
 = 00000037			x33 = 55
 = 0000002D			y33 = 45

				; Define O
 = 00000005			x1O = 5
 = 0000000B			x2O = 11
 = 00000003			y1O = 3
 = 00000009			y2O = 9
 = 00000008			xCentralO = 8
 = 00000006			yCentralO = 6
				; sum for winning
 = 0000000C			winX =  12
 = 00000003			winO = 3
				;value of x and o
 = 00000004			xvalue = 4
 = 00000001			ovalue = 1

 = 00000050			BufSize = 80

 00000000			.data

 00000000 01			ddx BYTE 1     	;start position of current feild on Ox
 00000001 01			ddy BYTE 1     	;start position of current feild on Oy
 00000002 00			player BYTE 0	; current player 0-O 1-X
 00000003  00000009 [		matrix BYTE 9 DUP (0)
	    00
	   ]
 0000000C  00000009 [		sums BYTE 9 DUP (0)
	    00
	   ]
 00000015 00			counter BYTE 0

 00000016  00000050 [		buffer BYTE BufSize DUP(?)
	    00
	   ]
 00000066 00000000		stdInHandleo HANDLE ?
 0000006A 00000000		stdInHandlex HANDLE ?
 0000006E 00000000		bytesRead   DWORD ?

 00000000			.code

 00000000			main PROC
				;---------- intro stuff, just for my demo
 00000000  E8 00000000 E		call Clrscr


				; PROGRAM STARTS HERE
				;---------------------------------------------------------------
 00000005  B8 0000001F		 	mov eax,white + (blue * 16)
 0000000A  E8 00000000 E	 	call SetTextColor
 0000000F  E8 00000000 E	 	call Clrscr

				;----- hides the cursor ----------------------------------------
 00000072			.data
 00000072 00000000		cursorInfo CONSOLE_CURSOR_INFO <>
	   00000000
 0000007A 00000000		outHandle  DWORD ?
 00000014			.code
					INVOKE GetStdHandle, STD_OUTPUT_HANDLE
 00000014  6A F5	   *	    push    -00000000Bh
 00000016  E8 00000000 E   *	    call   GetStdHandle
 0000001B  A3 0000007A R		mov  outHandle,eax
					INVOKE GetConsoleCursorInfo, outHandle, ADDR cursorInfo
 00000020  68 00000072 R   *	    push   OFFSET cursorInfo
 00000025  FF 35 0000007A R *	    push   outHandle
 0000002B  E8 00000000 E   *	    call   GetConsoleCursorInfo
 00000030  C7 05 00000076 R		mov  cursorInfo.bVisible,0
	   00000000
					INVOKE SetConsoleCursorInfo, outHandle, ADDR cursorInfo
 0000003A  68 00000072 R   *	    push   OFFSET cursorInfo
 0000003F  FF 35 0000007A R *	    push   outHandle
 00000045  E8 00000000 E   *	    call   SetConsoleCursorInfo
				;-----------------insert names for players----------------------
 0000004A			startsHere:
 0000004A  E8 00000000 E		call Clrscr
 0000004F  C6 05 00000015 R		mov counter,0
	   00
 00000056  B9 00000009			mov ecx,9
 0000005B  C6 05 00000002 R		mov player,0
	   00
 00000062			insterts0:
 00000062  C6 81 00000003 R		mov matrix[ecx],0
	   00
 00000069  C6 81 0000000C R		mov sums[ecx],0
	   00
 00000070  E2 F0			loop insterts0

					
				;---------------------------------------------------------------

				;------ Draw the Wallx1 ----------------------------------------
				; from (40,5) -- to (40,19)
 00000072  E8 00000000 E		call Clrscr
 00000077  B2 28			mov  dl,wall_X1
 00000079  B6 17			mov  dh,wallTop
 0000007B  B9 00000022			mov  ecx,wallBottom - wallTop + 1
 00000080  B0 B3			mov  al,0B3h	; solid block character

 00000082			DrawWallx1:
 00000082  E8 00000000 E		call Gotoxy
 00000087  E8 00000000 E		call WriteChar
 0000008C  FE C6			inc  dh
 0000008E  E2 F2			loop DrawWallx1
				;-------------------------------------------------------------

				;------ Draw the Wallx2---------------------------------------
				; from (40,5) -- to (40,19)

 00000090  B2 37			mov  dl,wall_X2
 00000092  B6 17			mov  dh,wallTop
 00000094  B9 00000022			mov  ecx,wallBottom - wallTop + 1
 00000099  B0 B3			mov  al,0B3h	; solid block character

 0000009B			DrawWallx2:
 0000009B  E8 00000000 E		call Gotoxy
 000000A0  E8 00000000 E		call WriteChar
 000000A5  FE C6			inc  dh
 000000A7  E2 F2			loop DrawWallx2
				;-------------------------------------------------------------

				;------ Draw the Wally1---------------------------------------
				; from (40,5) -- to (40,19)

 000000A9  B2 19			mov  dl,wallLeft
 000000AB  B6 22			mov  dh,wall_Y1
 000000AD  B9 0000002E			mov  ecx,wallRight - wallLeft + 1
 000000B2  B0 C4			mov  al,0C4h	; solid block character

 000000B4			DrawWally1:
 000000B4  E8 00000000 E		call Gotoxy
 000000B9  E8 00000000 E		call WriteChar
 000000BE  FE C2			inc  dl
 000000C0  E2 F2			loop DrawWally1
				;-------------------------------------------------------------

				;------ Draw the Wally2---------------------------------------
				; from (40,5) -- to (40,19)

 000000C2  B2 19			mov  dl,wallLeft
 000000C4  B6 2D			mov  dh,wall_Y2
 000000C6  B9 0000002E			mov  ecx,wallRight - wallLeft + 1
 000000CB  B0 C4			mov  al,0C4h	; solid block character

 000000CD			DrawWally2:
 000000CD  E8 00000000 E		call Gotoxy
 000000D2  E8 00000000 E		call WriteChar
 000000D7  FE C2			inc  dl
 000000D9  E2 F2			loop DrawWally2
				;-------------------------------------------------------------

				;------ Draw corners  ----------------------------------------
 000000DB  B0 C5			mov al, 0C5h
 000000DD  B2 28			mov dl, wall_X1
 000000DF  B6 22			mov dh, wall_Y1

 000000E1  E8 00000000 E		call Gotoxy
 000000E6  E8 00000000 E		call WriteChar

 000000EB  B2 28			mov dl, wall_X1
 000000ED  B6 2D			mov dh, wall_Y2

 000000EF  E8 00000000 E		call Gotoxy
 000000F4  E8 00000000 E		call WriteChar

 000000F9  B2 37			mov dl, wall_X2
 000000FB  B6 22			mov dh, wall_Y1

 000000FD  E8 00000000 E		call Gotoxy
 00000102  E8 00000000 E		call WriteChar

 00000107  B2 37			mov dl, wall_X2
 00000109  B6 2D			mov dh, wall_Y2

 0000010B  E8 00000000 E		call Gotoxy
 00000110  E8 00000000 E		call WriteChar

 00000115  E9 00000145			jmp L0
				;------------------------------------------

				;------ Draw X  ----------------------------------------

 0000011A			DrawX:
 0000011A  B0 FE			mov al, 0FEh
 0000011C  8A 15 00000000 R		mov dl, ddx 
 00000122  80 C2 05			add dl, x1X
 00000125  8A 35 00000001 R		mov dh, ddy
 0000012B  80 C6 03			add dh, y1X
 0000012E  B9 00000007			mov ecx, y2X - y1X + 1

 00000133			DrawXLoop:
 00000133  E8 00000000 E		call Gotoxy
 00000138  E8 00000000 E		call WriteChar
 0000013D  8A 1D 00000000 R		mov bl, ddx 
 00000143  02 1D 00000001 R		add bl, ddy
 00000149  80 C3 0E			add bl, xWidth
 0000014C  2A DE			sub bl, dh
 0000014E  8A FA			mov bh, dl
 00000150  8A D3			mov dl, bl

 00000152  E8 00000000 E		call Gotoxy
 00000157  E8 00000000 E		call WriteChar
 0000015C  8A D7			mov dl, bh
 0000015E  FE C2			inc dl
 00000160  FE C6			inc dh
 00000162  E2 CF			loop DrawXLoop
 00000164  E9 000000BE			jmp checkWinner

				;-------------------------------------------------------

				;------ Draw O  ----------------------------------------

					
 00000169			DrawO:
				;drawing central pixels of O
 00000169  B0 FE			mov al, 0FEh
 0000016B  8A 15 00000000 R		mov dl, ddx
 00000171  80 C2 08			add dl, xCentralO
 00000174  8A 35 00000001 R		mov dh, ddy
 0000017A  80 C6 03			add dh, y1O
 0000017D  E8 00000000 E		call Gotoxy
 00000182  E8 00000000 E		call WriteChar
					
 00000187  8A 35 00000001 R		mov dh, ddy 
 0000018D  80 C6 09			add dh, y2O
 00000190  E8 00000000 E		call Gotoxy
 00000195  E8 00000000 E		call WriteChar

 0000019A  8A 35 00000001 R		mov dh, ddy 
 000001A0  80 C6 06			add dh, yCentralO
 000001A3  8A 15 00000000 R		mov dl , ddx 
 000001A9  80 C2 05			add dl, x1O
 000001AC  E8 00000000 E		call Gotoxy
 000001B1  E8 00000000 E		call WriteChar

 000001B6  8A 15 00000000 R		mov dl , ddx 
 000001BC  80 C2 0B			add dl, x2O
 000001BF  E8 00000000 E		call Gotoxy
 000001C4  E8 00000000 E		call WriteChar


				;drawing rest of pixels of O
 000001C9  B3 02			mov bl, 2
 000001CB  B0 FE			mov al, 0FEh
 000001CD  8A 15 00000000 R		mov dl, ddx 
 000001D3  80 C2 05			add dl, x1O
 000001D6  02 D3			add dl, bl
 000001D8  8A 35 00000001 R		mov dh, ddy 
 000001DE  80 C6 03			add dh, y1O
 000001E1  B9 00000003			mov ecx, 3

 000001E6			DrawOLoop:
 000001E6  E8 00000000 E		call Gotoxy
 000001EB  E8 00000000 E		call WriteChar
 000001F0  02 D3			add dl, bl 
 000001F2  E8 00000000 E		call Gotoxy
 000001F7  E8 00000000 E		call WriteChar
 000001FC  80 C6 08			add dh, 8
 000001FF  2A F3			sub dh, bl
 00000201  E8 00000000 E		call Gotoxy
 00000206  E8 00000000 E		call WriteChar
 0000020B  2A D3			sub dl, bl
 0000020D  E8 00000000 E		call Gotoxy
 00000212  E8 00000000 E		call WriteChar
 00000217  02 F3			add dh, bl
 00000219  80 EE 08			sub dh, 8 
 0000021C  FE C6			inc dh
 0000021E  FE CA			dec dl
 00000220  80 C3 02			add bl, 2
 00000223  E2 C1			loop DrawOLoop
 00000225  EB 00			jmp checkWinner

				;-------------------------------------------------------
				;check winnerx
 00000227  B9 00000008		checkWinner:	mov ecx,8
 0000022C  8A 99 0000000C R	checking: mov bl, sums[ecx] 
 00000232  80 B9 0000000C R		cmp sums[ecx],winX
	   0C
 00000239  0F 84 00000665		jz xWin
 0000023F  80 B9 0000000C R		cmp sums[ecx],winO
	   03
 00000246  0F 84 00000677		jz oWin
 0000024C  E2 DE			loop checking
 0000024E  8A 1D 00000015 R		mov bl, counter
 00000254  80 FB 09			cmp bl,9
 00000257  0F 84 00000685		jz refresh
 0000025D  EB 00			jmp L0


 0000025F  B8 0000000A		L0:	mov	eax,10	; delay for msg processing
 00000264  E8 00000000 E		call	Delay
 00000269  E8 00000000 E		call	ReadKey	; wait for a keypress
 0000026E  74 EF			jz	L0
 00000270  80 FA 1B		Lesc: cmp dl,27
 00000273  75 0C			jnz L1
 00000275  E8 00000000 E		call Clrscr
					exit
 0000027A  6A 00	   *	    push   +000000000h
 0000027C  E8 00000000 E   *	    call   ExitProcess
 00000281  80 FA 61		L1:	cmp	dl,97
 00000284  0F 85 000000AA		jnz	L2
 0000028A  80 3D 00000004 R		cmp matrix[1],0
	   00
 00000291  75 CC			jnz L0
 00000293  C6 05 00000000 R		mov ddx, x31
	   19
 0000029A  C6 05 00000001 R		mov ddy, y31
	   2D
 000002A1  80 3D 00000002 R		cmp player, 0
	   00
 000002A8  75 45			jnz L1x
 000002AA  C6 05 00000004 R	L1o:mov matrix[1],ovalue
	   01
 000002B1  A0 0000000D R		mov al, sums[1]
 000002B6  04 01			add al, ovalue
 000002B8  A2 0000000D R		mov sums[1],al
 000002BD  A0 00000012 R		mov al, sums[6]
 000002C2  04 01			add al, ovalue
 000002C4  A2 00000012 R		mov sums[6],al
 000002C9  A0 00000014 R		mov al, sums[8]
 000002CE  04 01			add al, ovalue
 000002D0  A2 00000014 R		mov sums[8],al
 000002D5  C6 05 00000002 R		mov player, 1
	   01
 000002DC  8A 1D 00000015 R		mov bl , counter
 000002E2  FE C3			inc bl
 000002E4  88 1D 00000015 R		mov counter, bl
 000002EA  E9 FFFFFE7A			jmp drawO
 000002EF  C6 05 00000004 R	L1x:mov matrix[1],xvalue
	   04
 000002F6  A0 0000000D R		mov al, sums[1]
 000002FB  04 04			add al, xvalue
 000002FD  A2 0000000D R		mov sums[1],al
 00000302  A0 00000012 R		mov al, sums[6]
 00000307  04 04			add al, xvalue
 00000309  A2 00000012 R		mov sums[6],al
 0000030E  A0 00000014 R		mov al, sums[8]
 00000313  04 04			add al, xvalue
 00000315  A2 00000014 R		mov sums[8],al
 0000031A  C6 05 00000002 R		mov player , 0
	   00
 00000321  8A 1D 00000015 R		mov bl , counter
 00000327  FE C3			inc bl
 00000329  88 1D 00000015 R		mov counter, bl
 0000032F  E9 FFFFFDE6			jmp drawX

 00000334  80 FA 62		L2: cmp	dl,98
 00000337  0F 85 00000096		jnz	L3
 0000033D  80 3D 00000005 R		cmp matrix[2],0
	   00
 00000344  0F 85 FFFFFF15		jnz L0
 0000034A  C6 05 00000000 R		mov ddx, x32
	   28
 00000351  C6 05 00000001 R		mov ddy, y32
	   2D
 00000358  80 3D 00000002 R		cmp player,0
	   00
 0000035F  75 39			jnz L2x
 00000361  C6 05 00000005 R	L2o:mov matrix[2],ovalue
	   01
 00000368  A0 0000000E R		mov al, sums[2]
 0000036D  04 01			add al, ovalue
 0000036F  A2 0000000E R		mov sums[2],al
 00000374  A0 00000012 R		mov al, sums[6]
 00000379  04 01			add al, ovalue
 0000037B  A2 00000012 R		mov sums[6],al
 00000380  C6 05 00000002 R		mov player, 1
	   01
 00000387  8A 1D 00000015 R		mov bl , counter
 0000038D  FE C3			inc bl
 0000038F  88 1D 00000015 R		mov counter, bl
 00000395  E9 FFFFFDCF			jmp drawO
 0000039A  C6 05 00000005 R	L2x:mov matrix[2],xvalue
	   04
 000003A1  A0 0000000E R		mov al, sums[2]
 000003A6  04 04			add al, xvalue
 000003A8  A2 0000000E R		mov sums[2],al
 000003AD  A0 00000012 R		mov al, sums[6]
 000003B2  04 04			add al, xvalue
 000003B4  A2 00000012 R		mov sums[6],al
 000003B9  C6 05 00000002 R		mov player, 0
	   00
 000003C0  8A 1D 00000015 R		mov bl , counter
 000003C6  FE C3			inc bl
 000003C8  88 1D 00000015 R		mov counter, bl
 000003CE  E9 FFFFFD47			jmp drawX

 000003D3  80 FA 63		L3: cmp	dl,99
 000003D6  0F 85 000000AE		jnz	L4
 000003DC  80 3D 00000006 R		cmp matrix[3],0
	   00
 000003E3  0F 85 FFFFFE76		jnz L0
 000003E9  C6 05 00000000 R		mov ddx, x33
	   37
 000003F0  C6 05 00000001 R		mov ddy, y33
	   2D
 000003F7  80 3D 00000002 R		cmp player,0
	   00
 000003FE  75 45			jnz L3x
 00000400  C6 05 00000006 R	L3o:mov matrix[3],ovalue
	   01
 00000407  A0 0000000F R		mov al, sums[3]
 0000040C  04 01			add al, ovalue
 0000040E  A2 0000000F R		mov sums[3],al
 00000413  A0 00000012 R		mov al, sums[6]
 00000418  04 01			add al, ovalue
 0000041A  A2 00000012 R		mov sums[6],al
 0000041F  A0 00000013 R		mov al, sums[7]
 00000424  04 01			add al, ovalue
 00000426  A2 00000013 R		mov sums[7],al
 0000042B  C6 05 00000002 R		mov player, 1
	   01
 00000432  8A 1D 00000015 R		mov bl , counter
 00000438  FE C3			inc bl
 0000043A  88 1D 00000015 R		mov counter, bl
 00000440  E9 FFFFFD24			jmp drawO
 00000445  C6 05 00000006 R	L3x:mov matrix[3],xvalue
	   04
 0000044C  A0 0000000F R		mov al, sums[3]
 00000451  04 04			add al, xvalue
 00000453  A2 0000000F R		mov sums[3],al
 00000458  A0 00000012 R		mov al, sums[6]
 0000045D  04 04			add al, xvalue
 0000045F  A2 00000012 R		mov sums[6],al
 00000464  A0 00000013 R		mov al, sums[7]
 00000469  04 04			add al, xvalue
 0000046B  A2 00000013 R		mov sums[7],al
 00000470  C6 05 00000002 R		mov player, 0
	   00
 00000477  8A 1D 00000015 R		mov bl , counter
 0000047D  FE C3			inc bl
 0000047F  88 1D 00000015 R		mov counter, bl
 00000485  E9 FFFFFC90			jmp drawX

 0000048A  80 FA 64		L4: cmp	dl,100
 0000048D  0F 85 00000096		jnz	L5
 00000493  80 3D 00000007 R		cmp matrix[4],0
	   00
 0000049A  0F 85 FFFFFDBF		jnz L0
 000004A0  C6 05 00000000 R		mov ddx, x21
	   19
 000004A7  C6 05 00000001 R		mov ddy, y21
	   22
 000004AE  80 3D 00000002 R		cmp player,0
	   00
 000004B5  75 39			jnz L4x
 000004B7  C6 05 00000007 R	L4o:mov matrix[4],ovalue
	   01
 000004BE  A0 0000000D R		mov al, sums[1]
 000004C3  04 01			add al, ovalue
 000004C5  A2 0000000D R		mov sums[1],al
 000004CA  A0 00000011 R		mov al, sums[5]
 000004CF  04 01			add al, ovalue
 000004D1  A2 00000011 R		mov sums[5],al
 000004D6  C6 05 00000002 R		mov player, 1
	   01
 000004DD  8A 1D 00000015 R		mov bl , counter
 000004E3  FE C3			inc bl
 000004E5  88 1D 00000015 R		mov counter, bl
 000004EB  E9 FFFFFC79			jmp drawO
 000004F0  C6 05 00000007 R	L4x:mov matrix[4],xvalue
	   04
 000004F7  A0 0000000D R		mov al, sums[1]
 000004FC  04 04			add al, xvalue
 000004FE  A2 0000000D R	mov sums[1],al
 00000503  A0 00000011 R		mov al, sums[5]
 00000508  04 04			add al, xvalue
 0000050A  A2 00000011 R		mov sums[5],al
 0000050F  C6 05 00000002 R		mov player, 0
	   00
 00000516  8A 1D 00000015 R		mov bl , counter
 0000051C  FE C3			inc bl
 0000051E  88 1D 00000015 R		mov counter, bl
 00000524  E9 FFFFFBF1			jmp drawX

 00000529  80 FA 65		L5: cmp	dl,101
 0000052C  0F 85 000000C6		jnz	L6
 00000532  80 3D 00000008 R		cmp matrix[5],0
	   00
 00000539  0F 85 FFFFFD20		jnz L0
 0000053F  C6 05 00000000 R		mov ddx, x22
	   28
 00000546  C6 05 00000001 R		mov ddy, y22
	   22
 0000054D  80 3D 00000002 R		cmp player,0
	   00
 00000554  75 51			jnz L5x
 00000556  C6 05 00000008 R	L5o:mov matrix[5],ovalue
	   01
 0000055D  A0 0000000E R		mov al, sums[2]
 00000562  04 01			add al, ovalue
 00000564  A2 0000000E R		mov sums[2],al
 00000569  A0 00000011 R		mov al, sums[5]
 0000056E  04 01			add al, ovalue
 00000570  A2 00000011 R		mov sums[5],al
 00000575  A0 00000013 R		mov al, sums[7]
 0000057A  04 01			add al, ovalue
 0000057C  A2 00000013 R		mov sums[7],al
 00000581  A0 00000014 R		mov al, sums[8]
 00000586  04 01			add al, ovalue
 00000588  A2 00000014 R		mov sums[8],al
 0000058D  C6 05 00000002 R		mov player, 1
	   01
 00000594  8A 1D 00000015 R		mov bl , counter
 0000059A  FE C3			inc bl
 0000059C  88 1D 00000015 R		mov counter, bl
 000005A2  E9 FFFFFBC2			jmp drawO
 000005A7  C6 05 00000008 R	L5x:mov matrix[5],xvalue
	   04
 000005AE  A0 0000000E R		mov al, sums[2]
 000005B3  04 04			add al, xvalue
 000005B5  A2 0000000E R		mov sums[2],al
 000005BA  A0 00000011 R		mov al, sums[5]
 000005BF  04 04			add al, xvalue
 000005C1  A2 00000011 R		mov sums[5],al
 000005C6  A0 00000013 R		mov al, sums[7]
 000005CB  04 04			add al, xvalue
 000005CD  A2 00000013 R		mov sums[7],al
 000005D2  A0 00000014 R		mov al, sums[8]
 000005D7  04 04			add al, xvalue
 000005D9  A2 00000014 R		mov sums[8],al
 000005DE  C6 05 00000002 R		mov player, 0
	   00
 000005E5  8A 1D 00000015 R		mov bl , counter
 000005EB  FE C3			inc bl
 000005ED  88 1D 00000015 R		mov counter, bl
 000005F3  E9 FFFFFB22			jmp drawX
 000005F8  80 FA 66		L6: cmp	dl,102
 000005FB  0F 85 00000096		jnz	L7
 00000601  80 3D 00000009 R		cmp matrix[6],0
	   00
 00000608  0F 85 FFFFFC51		jnz L0
 0000060E  C6 05 00000000 R		mov ddx, x23
	   37
 00000615  C6 05 00000001 R		mov ddy, y23
	   22
 0000061C  80 3D 00000002 R		cmp player,0
	   00
 00000623  75 39			jnz L6x
 00000625  C6 05 00000009 R	L6o:mov matrix[6],ovalue
	   01
 0000062C  A0 0000000F R		mov al, sums[3]
 00000631  04 01			add al, ovalue
 00000633  A2 0000000F R		mov sums[3],al
 00000638  A0 00000011 R		mov al, sums[5]
 0000063D  04 01			add al, ovalue
 0000063F  A2 00000011 R		mov sums[5],al
 00000644  C6 05 00000002 R		mov player, 1
	   01
 0000064B  8A 1D 00000015 R		mov bl , counter
 00000651  FE C3			inc bl
 00000653  88 1D 00000015 R		mov counter, bl
 00000659  E9 FFFFFB0B			jmp drawO
 0000065E  C6 05 00000009 R	L6x:mov matrix[6],xvalue
	   04
 00000665  A0 0000000F R		mov al, sums[3]
 0000066A  04 04			add al, xvalue
 0000066C  A2 0000000F R		mov sums[3],al
 00000671  A0 00000011 R		mov al, sums[5]
 00000676  04 04			add al, xvalue
 00000678  A2 00000011 R		mov sums[5],al
 0000067D  C6 05 00000002 R		mov player, 0
	   00
 00000684  8A 1D 00000015 R		mov bl , counter
 0000068A  FE C3			inc bl
 0000068C  88 1D 00000015 R		mov counter, bl
 00000692  E9 FFFFFA83			jmp drawX

 00000697  80 FA 67		L7: cmp	dl,103
 0000069A  0F 85 000000AE		jnz	L8
 000006A0  80 3D 0000000A R		cmp matrix[7],0
	   00
 000006A7  0F 85 FFFFFBB2		jnz L0
 000006AD  C6 05 00000000 R		mov ddx, x11
	   19
 000006B4  C6 05 00000001 R		mov ddy, y11
	   17
 000006BB  80 3D 00000002 R		cmp player,0
	   00
 000006C2  75 45			jnz L7x
 000006C4  C6 05 0000000A R	L7o:mov matrix[7],ovalue
	   01
 000006CB  A0 0000000D R		mov al, sums[1]
 000006D0  04 01			add al, ovalue
 000006D2  A2 0000000D R		mov sums[1],al
 000006D7  A0 00000010 R		mov al, sums[4]
 000006DC  04 01			add al, ovalue
 000006DE  A2 00000010 R		mov sums[4],al
 000006E3  A0 00000013 R		mov al, sums[7]
 000006E8  04 01			add al, ovalue
 000006EA  A2 00000013 R		mov sums[7],al
 000006EF  C6 05 00000002 R		mov player, 1
	   01
 000006F6  8A 1D 00000015 R		mov bl , counter
 000006FC  FE C3			inc bl
 000006FE  88 1D 00000015 R		mov counter, bl
 00000704  E9 FFFFFA60			jmp drawO
 00000709  C6 05 0000000A R	L7x:mov matrix[7],xvalue
	   04
 00000710  A0 0000000D R		mov al, sums[1]
 00000715  04 04			add al, xvalue
 00000717  A2 0000000D R		mov sums[1],al
 0000071C  A0 00000010 R		mov al, sums[4]
 00000721  04 04			add al, xvalue
 00000723  A2 00000010 R		mov sums[4],al
 00000728  A0 00000013 R		mov al, sums[7]
 0000072D  04 04			add al, xvalue
 0000072F  A2 00000013 R		mov sums[7],al
 00000734  C6 05 00000002 R		mov player, 0
	   00
 0000073B  8A 1D 00000015 R		mov bl , counter
 00000741  FE C3			inc bl
 00000743  88 1D 00000015 R		mov counter, bl
 00000749  E9 FFFFF9CC			jmp drawX

 0000074E  80 FA 68		L8: cmp	dl,104
 00000751  0F 85 00000096		jnz	L9
 00000757  80 3D 0000000B R		cmp matrix[8],0
	   00
 0000075E  0F 85 FFFFFAFB		jnz L0
 00000764  C6 05 00000000 R		mov ddx, x12
	   28
 0000076B  C6 05 00000001 R		mov ddy, y12
	   17
 00000772  80 3D 00000002 R		cmp player,0
	   00
 00000779  75 39			jnz L8x
 0000077B  C6 05 0000000B R	L8o:mov matrix[8],ovalue
	   01
 00000782  A0 0000000E R		mov al, sums[2]
 00000787  04 01			add al, ovalue
 00000789  A2 0000000E R		mov sums[2],al
 0000078E  A0 00000010 R		mov al, sums[4]
 00000793  04 01			add al, ovalue
 00000795  A2 00000010 R		mov sums[4],al
 0000079A  C6 05 00000002 R		mov player, 1
	   01
 000007A1  8A 1D 00000015 R		mov bl , counter
 000007A7  FE C3			inc bl
 000007A9  88 1D 00000015 R		mov counter, bl
 000007AF  E9 FFFFF9B5			jmp drawO
 000007B4  C6 05 0000000B R	L8x:mov matrix[8],xvalue
	   04
 000007BB  A0 0000000E R		mov al, sums[2]
 000007C0  04 04			add al, xvalue
 000007C2  A2 0000000E R		mov sums[2],al
 000007C7  A0 00000010 R		mov al, sums[4]
 000007CC  04 04			add al, xvalue
 000007CE  A2 00000010 R		mov sums[4],al
 000007D3  C6 05 00000002 R		mov player, 0
	   00
 000007DA  8A 1D 00000015 R		mov bl , counter
 000007E0  FE C3			inc bl
 000007E2  88 1D 00000015 R		mov counter, bl
 000007E8  E9 FFFFF92D			jmp drawX

 000007ED  80 FA 69		L9: cmp	dl,105
 000007F0  0F 85 FFFFFA69		jnz	L0
 000007F6  80 3D 0000000C R		cmp matrix[9],0
	   00
 000007FD  0F 85 FFFFFA5C		jnz L0
 00000803  C6 05 00000000 R		mov ddx, x13
	   37
 0000080A  C6 05 00000001 R		mov ddy, y13
	   17
 00000811  80 3D 00000002 R		cmp player,0
	   00
 00000818  75 45			jnz L9x
 0000081A  C6 05 0000000C R	L9o:mov matrix[9],ovalue
	   01
 00000821  A0 0000000F R		mov al, sums[3]
 00000826  04 01			add al, ovalue
 00000828  A2 0000000F R		mov sums[3],al
 0000082D  A0 00000010 R		mov al, sums[4]
 00000832  04 01			add al, ovalue
 00000834  A2 00000010 R		mov sums[4],al
 00000839  A0 00000014 R		mov al, sums[8]
 0000083E  04 01			add al, ovalue
 00000840  A2 00000014 R		mov sums[8],al
 00000845  C6 05 00000002 R		mov player, 1
	   01
 0000084C  8A 1D 00000015 R		mov bl , counter
 00000852  FE C3			inc bl
 00000854  88 1D 00000015 R		mov counter, bl
 0000085A  E9 FFFFF90A			jmp drawO
 0000085F  C6 05 0000000C R	L9x:mov matrix[9],xvalue
	   04
 00000866  A0 0000000F R		mov al, sums[3]
 0000086B  04 04			add al, xvalue
 0000086D  A2 0000000F R		mov sums[3],al
 00000872  A0 00000010 R		mov al, sums[4]
 00000877  04 04			add al, xvalue
 00000879  A2 00000010 R		mov sums[4],al
 0000087E  A0 00000014 R		mov al, sums[8]
 00000883  04 04			add al, xvalue
 00000885  A2 00000014 R		mov sums[8],al
 0000088A  C6 05 00000002 R		mov player,0
	   00
 00000891  8A 1D 00000015 R		mov bl , counter
 00000897  FE C3			inc bl
 00000899  88 1D 00000015 R		mov counter, bl
 0000089F  E9 FFFFF876			jmp drawX

 000008A4  E8 00000000 E	xWin : call Clrscr
					mWrite <"X player is winner",0dh,0ah>
 0000007E		     1		.data		
 0000007E 58 20 70 6C 61     1		??0000 BYTE "X player is winner",0dh,0ah,0	
	   79 65 72 20 69
	   73 20 77 69 6E
	   6E 65 72 0D 0A
	   00
 000008A9		     1		.code
 000008A9  52		     1		push	edx
 000008AA  BA 0000007E R     1		mov	edx,OFFSET ??0000
 000008AF  E8 00000000 E     1		call	WriteString
 000008B4  5A		     1		pop	edx
					mWrite <"Enter esc key for exit, and enter key if you want a new game.",0dh,0ah>
 00000093		     1		.data		
 00000093 45 6E 74 65 72     1		??0001 BYTE "Enter esc key for exit, and enter key if you want a new game.",0dh,0ah,0	
	   20 65 73 63 20
	   6B 65 79 20 66
	   6F 72 20 65 78
	   69 74 2C 20 61
	   6E 64 20 65 6E
	   74 65 72 20 6B
	   65 79 20 69 66
	   20 79 6F 75 20
	   77 61 6E 74 20
	   61 20 6E 65 77
	   20 67 61 6D 65
	   2E 0D 0A 00
 000008B5		     1		.code
 000008B5  52		     1		push	edx
 000008B6  BA 00000093 R     1		mov	edx,OFFSET ??0001
 000008BB  E8 00000000 E     1		call	WriteString
 000008C0  5A		     1		pop	edx
 000008C1  EB 3E			jmp startOrEnd
 000008C3  E8 00000000 E	oWin : call Clrscr
					mWrite <"O player is winner!",0dh,0ah>
 000000D3		     1		.data		
 000000D3 4F 20 70 6C 61     1		??0002 BYTE "O player is winner!",0dh,0ah,0	
	   79 65 72 20 69
	   73 20 77 69 6E
	   6E 65 72 21 0D
	   0A 00
 000008C8		     1		.code
 000008C8  52		     1		push	edx
 000008C9  BA 000000D3 R     1		mov	edx,OFFSET ??0002
 000008CE  E8 00000000 E     1		call	WriteString
 000008D3  5A		     1		pop	edx
					mWrite <"Enter esc key for exit, and enter key if you want a new game.",0dh,0ah>
 000000E9		     1		.data		
 000000E9 45 6E 74 65 72     1		??0003 BYTE "Enter esc key for exit, and enter key if you want a new game.",0dh,0ah,0	
	   20 65 73 63 20
	   6B 65 79 20 66
	   6F 72 20 65 78
	   69 74 2C 20 61
	   6E 64 20 65 6E
	   74 65 72 20 6B
	   65 79 20 69 66
	   20 79 6F 75 20
	   77 61 6E 74 20
	   61 20 6E 65 77
	   20 67 61 6D 65
	   2E 0D 0A 00
 000008D4		     1		.code
 000008D4  52		     1		push	edx
 000008D5  BA 000000E9 R     1		mov	edx,OFFSET ??0003
 000008DA  E8 00000000 E     1		call	WriteString
 000008DF  5A		     1		pop	edx
 000008E0  EB 1F			jmp startOrEnd
					
 000008E2			refresh: 
 000008E2  E8 00000000 E		call Clrscr
					mWrite <"It is draw!",0dh,0ah>
 00000129		     1		.data		
 00000129 49 74 20 69 73     1		??0004 BYTE "It is draw!",0dh,0ah,0	
	   20 64 72 61 77
	   21 0D 0A 00
 000008E7		     1		.code
 000008E7  52		     1		push	edx
 000008E8  BA 00000129 R     1		mov	edx,OFFSET ??0004
 000008ED  E8 00000000 E     1		call	WriteString
 000008F2  5A		     1		pop	edx
					mWrite <"Enter esc key for exit, and enter key if you want a new game.",0dh,0ah>
 00000137		     1		.data		
 00000137 45 6E 74 65 72     1		??0005 BYTE "Enter esc key for exit, and enter key if you want a new game.",0dh,0ah,0	
	   20 65 73 63 20
	   6B 65 79 20 66
	   6F 72 20 65 78
	   69 74 2C 20 61
	   6E 64 20 65 6E
	   74 65 72 20 6B
	   65 79 20 69 66
	   20 79 6F 75 20
	   77 61 6E 74 20
	   61 20 6E 65 77
	   20 67 61 6D 65
	   2E 0D 0A 00
 000008F3		     1		.code
 000008F3  52		     1		push	edx
 000008F4  BA 00000137 R     1		mov	edx,OFFSET ??0005
 000008F9  E8 00000000 E     1		call	WriteString
 000008FE  5A		     1		pop	edx
 000008FF  EB 00			jmp startOrEnd

 00000901			startOrEnd:
 00000901  B8 0000000A			mov	eax,10	; delay for msg processing
 00000906  E8 00000000 E		call	Delay
 0000090B  E8 00000000 E		call	ReadKey	; wait for a keypress
 00000910  74 EF			jz	startOrEnd
 00000912  80 FA 1B		Lesc1: cmp dl,27
 00000915  75 0C			jnz Lenter
 00000917  E8 00000000 E		call Clrscr
					exit
 0000091C  6A 00	   *	    push   +000000000h
 0000091E  E8 00000000 E   *	    call   ExitProcess
 00000923			Lenter:
 00000923  80 FA 0D			cmp dl,13
 00000926  0F 84 FFFFF71E		jz startsHere
 0000092C  EB D3			jmp startOrEnd
 0000092E			main ENDP

				END main
Microsoft (R) Macro Assembler Version 14.10.25019.0	    06/24/17 19:28:31
AddTwo.asm						     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000177 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000092E Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000092E Public STDCALL
  startsHere . . . . . . . . . .	L Near	 0000004A _TEXT	
  insterts0  . . . . . . . . . .	L Near	 00000062 _TEXT	
  DrawWallx1 . . . . . . . . . .	L Near	 00000082 _TEXT	
  DrawWallx2 . . . . . . . . . .	L Near	 0000009B _TEXT	
  DrawWally1 . . . . . . . . . .	L Near	 000000B4 _TEXT	
  DrawWally2 . . . . . . . . . .	L Near	 000000CD _TEXT	
  DrawX  . . . . . . . . . . . .	L Near	 0000011A _TEXT	
  DrawXLoop  . . . . . . . . . .	L Near	 00000133 _TEXT	
  DrawO  . . . . . . . . . . . .	L Near	 00000169 _TEXT	
  DrawOLoop  . . . . . . . . . .	L Near	 000001E6 _TEXT	
  checkWinner  . . . . . . . . .	L Near	 00000227 _TEXT	
  checking . . . . . . . . . . .	L Near	 0000022C _TEXT	
  L0 . . . . . . . . . . . . . .	L Near	 0000025F _TEXT	
  Lesc . . . . . . . . . . . . .	L Near	 00000270 _TEXT	
  L1 . . . . . . . . . . . . . .	L Near	 00000281 _TEXT	
  L1o  . . . . . . . . . . . . .	L Near	 000002AA _TEXT	
  L1x  . . . . . . . . . . . . .	L Near	 000002EF _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 00000334 _TEXT	
  L2o  . . . . . . . . . . . . .	L Near	 00000361 _TEXT	
  L2x  . . . . . . . . . . . . .	L Near	 0000039A _TEXT	
  L3 . . . . . . . . . . . . . .	L Near	 000003D3 _TEXT	
  L3o  . . . . . . . . . . . . .	L Near	 00000400 _TEXT	
  L3x  . . . . . . . . . . . . .	L Near	 00000445 _TEXT	
  L4 . . . . . . . . . . . . . .	L Near	 0000048A _TEXT	
  L4o  . . . . . . . . . . . . .	L Near	 000004B7 _TEXT	
  L4x  . . . . . . . . . . . . .	L Near	 000004F0 _TEXT	
  L5 . . . . . . . . . . . . . .	L Near	 00000529 _TEXT	
  L5o  . . . . . . . . . . . . .	L Near	 00000556 _TEXT	
  L5x  . . . . . . . . . . . . .	L Near	 000005A7 _TEXT	
  L6 . . . . . . . . . . . . . .	L Near	 000005F8 _TEXT	
  L6o  . . . . . . . . . . . . .	L Near	 00000625 _TEXT	
  L6x  . . . . . . . . . . . . .	L Near	 0000065E _TEXT	
  L7 . . . . . . . . . . . . . .	L Near	 00000697 _TEXT	
  L7o  . . . . . . . . . . . . .	L Near	 000006C4 _TEXT	
  L7x  . . . . . . . . . . . . .	L Near	 00000709 _TEXT	
  L8 . . . . . . . . . . . . . .	L Near	 0000074E _TEXT	
  L8o  . . . . . . . . . . . . .	L Near	 0000077B _TEXT	
  L8x  . . . . . . . . . . . . .	L Near	 000007B4 _TEXT	
  L9 . . . . . . . . . . . . . .	L Near	 000007ED _TEXT	
  L9o  . . . . . . . . . . . . .	L Near	 0000081A _TEXT	
  L9x  . . . . . . . . . . . . .	L Near	 0000085F _TEXT	
  xWin . . . . . . . . . . . . .	L Near	 000008A4 _TEXT	
  oWin . . . . . . . . . . . . .	L Near	 000008C3 _TEXT	
  refresh  . . . . . . . . . . .	L Near	 000008E2 _TEXT	
  startOrEnd . . . . . . . . . .	L Near	 00000901 _TEXT	
  Lesc1  . . . . . . . . . . . .	L Near	 00000912 _TEXT	
  Lenter . . . . . . . . . . . .	L Near	 00000923 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 0000007E _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00000093 _DATA	
??0002 . . . . . . . . . . . . .	Byte	 000000D3 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 000000E9 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00000129 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00000137 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
BufSize  . . . . . . . . . . . .	Number	 00000050h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
ball . . . . . . . . . . . . . .	Number	 00000002h   
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
buffer . . . . . . . . . . . . .	Byte	 00000016 _DATA	
bytesRead  . . . . . . . . . . .	DWord	 0000006E _DATA	
counter  . . . . . . . . . . . .	Byte	 00000015 _DATA	
cursorInfo . . . . . . . . . . .	CONSOLE_CURSOR_INFO  00000072 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
ddx  . . . . . . . . . . . . . .	Byte	 00000000 _DATA	
ddy  . . . . . . . . . . . . . .	Byte	 00000001 _DATA	
drawDelay  . . . . . . . . . . .	Number	 00000014h   
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
matrix . . . . . . . . . . . . .	Byte	 00000003 _DATA	
outHandle  . . . . . . . . . . .	DWord	 0000007A _DATA	
ovalue . . . . . . . . . . . . .	Number	 00000001h   
player . . . . . . . . . . . . .	Byte	 00000002 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
stdInHandleo . . . . . . . . . .	DWord	 00000066 _DATA	
stdInHandlex . . . . . . . . . .	DWord	 0000006A _DATA	
sums . . . . . . . . . . . . . .	Byte	 0000000C _DATA	
wallBottom . . . . . . . . . . .	Number	 00000038h   
wallLeft . . . . . . . . . . . .	Number	 00000019h   
wallRight  . . . . . . . . . . .	Number	 00000046h   
wallTop  . . . . . . . . . . . .	Number	 00000017h   
wall_X1  . . . . . . . . . . . .	Number	 00000028h   
wall_X2  . . . . . . . . . . . .	Number	 00000037h   
wall_Y1  . . . . . . . . . . . .	Number	 00000022h   
wall_Y2  . . . . . . . . . . . .	Number	 0000002Dh   
white  . . . . . . . . . . . . .	Number	 0000000Fh   
winO . . . . . . . . . . . . . .	Number	 00000003h   
winX . . . . . . . . . . . . . .	Number	 0000000Ch   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
x11  . . . . . . . . . . . . . .	Number	 00000019h   
x12  . . . . . . . . . . . . . .	Number	 00000028h   
x13  . . . . . . . . . . . . . .	Number	 00000037h   
x1O  . . . . . . . . . . . . . .	Number	 00000005h   
x1X  . . . . . . . . . . . . . .	Number	 00000005h   
x21  . . . . . . . . . . . . . .	Number	 00000019h   
x22  . . . . . . . . . . . . . .	Number	 00000028h   
x23  . . . . . . . . . . . . . .	Number	 00000037h   
x2O  . . . . . . . . . . . . . .	Number	 0000000Bh   
x2X  . . . . . . . . . . . . . .	Number	 0000000Bh   
x31  . . . . . . . . . . . . . .	Number	 00000019h   
x32  . . . . . . . . . . . . . .	Number	 00000028h   
x33  . . . . . . . . . . . . . .	Number	 00000037h   
xCentralO  . . . . . . . . . . .	Number	 00000008h   
xWidth . . . . . . . . . . . . .	Number	 0000000Eh   
xmax . . . . . . . . . . . . . .	Number	 0000005Fh   
xmin . . . . . . . . . . . . . .	Number	 00000000h   
xvalue . . . . . . . . . . . . .	Number	 00000004h   
y11  . . . . . . . . . . . . . .	Number	 00000017h   
y12  . . . . . . . . . . . . . .	Number	 00000017h   
y13  . . . . . . . . . . . . . .	Number	 00000017h   
y1O  . . . . . . . . . . . . . .	Number	 00000003h   
y1X  . . . . . . . . . . . . . .	Number	 00000003h   
y21  . . . . . . . . . . . . . .	Number	 00000022h   
y22  . . . . . . . . . . . . . .	Number	 00000022h   
y23  . . . . . . . . . . . . . .	Number	 00000022h   
y2O  . . . . . . . . . . . . . .	Number	 00000009h   
y2X  . . . . . . . . . . . . . .	Number	 00000009h   
y31  . . . . . . . . . . . . . .	Number	 0000002Dh   
y32  . . . . . . . . . . . . . .	Number	 0000002Dh   
y33  . . . . . . . . . . . . . .	Number	 0000002Dh   
yCentralO  . . . . . . . . . . .	Number	 00000006h   
yellow . . . . . . . . . . . . .	Number	 0000000Eh   
ymax . . . . . . . . . . . . . .	Number	 0000004Fh   
ymin . . . . . . . . . . . . . .	Number	 00000000h   

	   0 Warnings
	   0 Errors
